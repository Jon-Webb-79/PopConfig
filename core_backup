#!/usr/bin/env bash

set -euo pipefail

# ─── USER CONFIGURATION ─────────────────────────────────────────────────────────
ENABLED=true                        # Set to 'false' to disable backups temporarily
BACKUP_DRIVE_LABEL="BackupDrive"     # Replace with your actual drive label
RETENTION_DAYS=14                   # How long to keep old backups
EXCLUDES=(
    "/dev/*"
    "/proc/*"
    "/sys/*"
    "/run/*"
    "/mnt/*"
    "/media/*"
    "/lost+found"
    "/swapfile"
)

# ─── SYSTEM PATHS AND VARIABLES ─────────────────────────────────────────────────
USERNAME="${SUDO_USER:-$USER}"
DATE=$(date '+%Y-%m-%d_%H-%M-%S')
LOG_DIR="/home/$USERNAME/logfiles"
LOGFILE="$LOG_DIR/backup_log.log"
SRC="/"

# ─── EARLY EXIT IF DISABLED ─────────────────────────────────────────────────────
mkdir -p "$LOG_DIR"
if [ "$ENABLED" != "true" ]; then
    echo "[$DATE] Backup disabled via ENABLED flag" >> "$LOGFILE"
    exit 0
fi

# ─── DETECT DISTRO AND BACKUP PATH ──────────────────────────────────────────────
if grep -qE "Ubuntu|Pop" /etc/os-release; then
    MEDIA_BASE="/media/$USERNAME"
elif grep -q "Arch" /etc/os-release; then
    MEDIA_BASE="/run/media/$USERNAME"
else
    echo "[$DATE] ERROR: Unsupported Linux distribution" >> "$LOGFILE"
    exit 1
fi

BACKUP_ROOT="$MEDIA_BASE/$BACKUP_DRIVE_LABEL"
BACKUP_DEST="$BACKUP_ROOT/$DATE"

if [ ! -d "$BACKUP_ROOT" ]; then
    echo "[$DATE] ERROR: Backup drive not found at $BACKUP_ROOT" >> "$LOGFILE"
    exit 2
fi

if ! command -v rsync &>/dev/null; then
    echo "[$DATE] ERROR: rsync not installed" >> "$LOGFILE"
    exit 3
fi

# ─── FIND LATEST BACKUP ─────────────────────────────────────────────────────────
LATEST_BACKUP=$(find "$BACKUP_ROOT" -mindepth 1 -maxdepth 1 -type d -printf "%T@ %p\n" | sort -n | awk '{print $2}' | tail -n 1)
LINK_DEST=""
if [[ -d "$LATEST_BACKUP" && "$LATEST_BACKUP" != "$BACKUP_DEST" ]]; then
    LINK_DEST="--link-dest=$LATEST_BACKUP"
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Using $LATEST_BACKUP as reference for incremental backup" >> "$LOGFILE"
else
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] No previous backup found; performing full backup" >> "$LOGFILE"
fi

# ─── CREATE NEW BACKUP DESTINATION ──────────────────────────────────────────────
mkdir -p "$BACKUP_DEST"

# ─── RUN BACKUP ─────────────────────────────────────────────────────────────────
START_TIME=$(date +%s)
echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Starting backup to $BACKUP_DEST" >> "$LOGFILE"

# Assemble rsync command safely
RSYNC_CMD=(rsync -aAXH --delete)
for item in "${EXCLUDES[@]}"; do
    RSYNC_CMD+=("--exclude=$item")
done
if [[ -n "$LATEST_BACKUP" ]]; then
    RSYNC_CMD+=("--link-dest=$LATEST_BACKUP")
fi
RSYNC_CMD+=("$SRC" "$BACKUP_DEST")

# Log what command we're running
echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Running rsync command: ${RSYNC_CMD[*]}" >> "$LOGFILE"

# Run rsync
if "${RSYNC_CMD[@]}" >/dev/null 2>>"$LOGFILE"; then
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Backup completed successfully in ${DURATION} seconds" >> "$LOGFILE"
else
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] ERROR: Backup failed" >> "$LOGFILE"
    exit 4
fi

# START_TIME=$(date +%s)
# echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Starting backup to $BACKUP_DEST" >> "$LOGFILE"
#
# # Assemble rsync command safely
# RSYNC_CMD=(rsync -aAXH --delete)
# for item in "${EXCLUDES[@]}"; do
#     RSYNC_CMD+=("--exclude=$item")
# done
# if [[ -n "$LINK_DEST" ]]; then
#     RSYNC_CMD+=("$LINK_DEST")
# fi
# RSYNC_CMD+=("$SRC" "$BACKUP_DEST")
#
# # Run rsync
# if "${RSYNC_CMD[@]}" >/dev/null 2>>"$LOGFILE"; then
#     END_TIME=$(date +%s)
#     DURATION=$((END_TIME - START_TIME))
#     echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Backup completed successfully in ${DURATION} seconds" >> "$LOGFILE"
# else
#     echo "[$(date '+%Y-%m-%d_%H-%M-%S')] ERROR: Backup failed" >> "$LOGFILE"
#     exit 4
# fi

# ─── CLEANUP OLD BACKUPS ────────────────────────────────────────────────────────
OLD_BACKUPS_FOUND=$(find "$BACKUP_ROOT" -mindepth 1 -maxdepth 1 -type d -mtime +"$RETENTION_DAYS" | wc -l)
if [ "$OLD_BACKUPS_FOUND" -gt 0 ]; then
    find "$BACKUP_ROOT" -mindepth 1 -maxdepth 1 -type d -mtime +"$RETENTION_DAYS" -exec rm -rf {} \;
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Old backups removed (older than $RETENTION_DAYS days)" >> "$LOGFILE"
else
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] No old backups to remove" >> "$LOGFILE"
fi

exit 0

