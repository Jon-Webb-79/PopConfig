#!/usr/bin/env bash

set -euo pipefail

# ─── USER CONFIGURATION ─────────────────────────────────────────────────────────
ENABLED=true                        # Set to 'false' to disable backups temporarily
BACKUP_DRIVE_LABEL="BackupDrive"   # Replace with the actual label of your backup disk
RETENTION_DAYS=14                  # Delete backups older than this (in days)
EXCLUDES=(
    "/dev/*"
    "/proc/*"
    "/sys/*"
    "/run/*"
    "/mnt/*"
    "/media/*"
    "/lost+found"
    "/swapfile"
)

# ─── SYSTEM PATHS AND VARIABLES ─────────────────────────────────────────────────
USERNAME="${SUDO_USER:-$USER}"
DATE=$(date '+%Y-%m-%d_%H-%M-%S')
LOG_DIR="$HOME/logfiles"
LOGFILE="$LOG_DIR/backup_log.log"
SRC="/"

# Determine mount point base based on distro
if grep -qE "Ubuntu|Pop" /etc/os-release; then
    MEDIA_BASE="/media/$USERNAME"
elif grep -q "Arch" /etc/os-release; then
    MEDIA_BASE="/run/media/$USERNAME"
else
    echo "[$DATE] Unsupported Linux distribution" | tee -a "$LOGFILE"
    exit 1
fi

BACKUP_ROOT="$MEDIA_BASE/$BACKUP_DRIVE_LABEL"
BACKUP_DEST="$BACKUP_ROOT/$DATE"

# ─── EARLY EXIT IF DISABLED ─────────────────────────────────────────────────────
mkdir -p "$LOG_DIR"
if [ "$ENABLED" != "true" ]; then
    echo "[$DATE] Backups disabled via ENABLED flag" >> "$LOGFILE"
    exit 0
fi

# ─── CHECK PREREQUISITES ────────────────────────────────────────────────────────
if [ ! -d "$BACKUP_ROOT" ]; then
    echo "[$DATE] ERROR: Backup drive not found at $BACKUP_ROOT" >> "$LOGFILE"
    exit 2
fi

if ! command -v rsync &>/dev/null; then
    echo "[$DATE] ERROR: rsync not installed" >> "$LOGFILE"
    exit 3
fi

# ─── PREPARE BACKUP OPTIONS ─────────────────────────────────────────────────────
mkdir -p "$BACKUP_DEST"

EXCLUDE_FLAGS=()
for item in "${EXCLUDES[@]}"; do
    EXCLUDE_FLAGS+=("--exclude=$item")
done

# Detect previous backup
LATEST_BACKUP=$(find "$BACKUP_ROOT" -mindepth 1 -maxdepth 1 -type d | sort | tail -n 1)
LINK_DEST=""
if [[ -d "$LATEST_BACKUP" && "$LATEST_BACKUP" != "$BACKUP_DEST" ]]; then
    LINK_DEST="--link-dest=$LATEST_BACKUP"
    echo "[$DATE] Using $LATEST_BACKUP as reference for incremental backup" >> "$LOGFILE"
else
    echo "[$DATE] No previous backup found; performing full backup" >> "$LOGFILE"
fi

# ─── RUN BACKUP ─────────────────────────────────────────────────────────────────
echo "[$DATE] Starting backup to $BACKUP_DEST" >> "$LOGFILE"
if rsync -aAXH --delete "${EXCLUDE_FLAGS[@]}" $LINK_DEST "$SRC" "$BACKUP_DEST" >/dev/null 2>>"$LOGFILE"; then
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] Backup to $BACKUP_DEST completed successfully" >> "$LOGFILE"
else
    echo "[$(date '+%Y-%m-%d_%H-%M-%S')] ERROR: Backup to $BACKUP_DEST failed" >> "$LOGFILE"
fi

# ─── REMOVE OLD BACKUPS ─────────────────────────────────────────────────────────
find "$BACKUP_ROOT" -mindepth 1 -maxdepth 1 -type d -mtime +$RETENTION_DAYS -exec rm -rf {} \; \
    && echo "[$DATE] Old backups removed (older than $RETENTION_DAYS days)" >> "$LOGFILE"

echo "[$DATE] Backup completed successfully" >> "$LOGFILE"
exit 0

